Orignally from https://steamcommunity.com/groups/steamworks/discussions/0/3112542578512589058/#c3112542578523320753
Authored by: djdron_bw
Amended by: DanielSnd

---
 sdk/public/steam/isteamapps.h        |  3 +-
 sdk/public/steam/isteamfriends.h     | 21 ++++++++-----
 sdk/public/steam/isteamgameserver.h  |  6 ++--
 sdk/public/steam/isteamhtmlsurface.h |  4 +++
 sdk/public/steam/isteammatchmaking.h |  9 ++++--
 sdk/public/steam/isteamremoteplay.h  |  3 +-
 sdk/public/steam/isteamuser.h        |  3 +-
 sdk/public/steam/isteamuserstats.h   | 47 ++++++++++++++++++++++++++++
 sdk/public/steam/steam_api_common.h  |  7 +++++
 sdk/public/steam/steam_mingw_hack.h  | 25 +++++++++++++++
 10 files changed, 113 insertions(+), 15 deletions(-)
 create mode 100644 sdk/public/steam/steam_mingw_hack.h

diff --git a/sdk/public/steam/isteamapps.h b/sdk/public/steam/isteamapps.h
index f0b1137..a54abb3 100644
--- a/sdk/public/steam/isteamapps.h
+++ b/sdk/public/steam/isteamapps.h
@@ -69,7 +69,8 @@ public:
 	
 	// returns the SteamID of the original owner. If this CSteamID is different from ISteamUser::GetSteamID(),
 	// the user has a temporary license borrowed via Family Sharing
-	virtual CSteamID GetAppOwner() = 0; 
+//	virtual CSteamID GetAppOwner() = 0;
+	STEAM_IFACE_FUNC_0(CSteamID, GetAppOwner) 
 
 	// Returns the associated launch param if the game is run via steam://run/<appid>//?param1=value1&param2=value2&param3=value3 etc.
 	// Parameter names starting with the character '@' are reserved for internal use and will always return and empty string.
diff --git a/sdk/public/steam/isteamfriends.h b/sdk/public/steam/isteamfriends.h
index 0616c13..59ca36f 100644
--- a/sdk/public/steam/isteamfriends.h
+++ b/sdk/public/steam/isteamfriends.h
@@ -199,7 +199,8 @@ public:
 	// iFriend is a index of range [0, GetFriendCount())
 	// iFriendsFlags must be the same value as used in GetFriendCount()
 	// the returned CSteamID can then be used by all the functions below to access details about the user
-	virtual CSteamID GetFriendByIndex( int iFriend, int iFriendFlags ) = 0;
+//	virtual CSteamID GetFriendByIndex( int iFriend, int iFriendFlags ) = 0;
+	STEAM_IFACE_FUNC_2(CSteamID, GetFriendByIndex, int, int)
 
 	// returns a relationship to a user
 	virtual EFriendRelationship GetFriendRelationship( CSteamID steamIDFriend ) = 0;
@@ -243,7 +244,8 @@ public:
 
 	// clan (group) iteration and access functions
 	virtual int GetClanCount() = 0;
-	virtual CSteamID GetClanByIndex( int iClan ) = 0;
+//	virtual CSteamID GetClanByIndex( int iClan ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetClanByIndex, int)
 	virtual const char *GetClanName( CSteamID steamIDClan ) = 0;
 	virtual const char *GetClanTag( CSteamID steamIDClan ) = 0;
 	// returns the most recent information we have about what's happening in a clan
@@ -258,7 +260,8 @@ public:
 	// note that the current user must be in a lobby to retrieve CSteamIDs of other users in that lobby
 	// steamIDSource can be the steamID of a group, game server, lobby or chat room
 	virtual int GetFriendCountFromSource( CSteamID steamIDSource ) = 0;
-	virtual CSteamID GetFriendFromSourceByIndex( CSteamID steamIDSource, int iFriend ) = 0;
+//	virtual CSteamID GetFriendFromSourceByIndex( CSteamID steamIDSource, int iFriend ) = 0;
+	STEAM_IFACE_FUNC_2(CSteamID, GetFriendFromSourceByIndex, CSteamID, int)
 
 	// returns true if the local user can see that steamIDUser is a member or in steamIDSource
 	virtual bool IsUserInSource( CSteamID steamIDUser, CSteamID steamIDSource ) = 0;
@@ -327,11 +330,13 @@ public:
 	// iteration of clan officers - can only be done when a RequestClanOfficerList() call has completed
 	
 	// returns the steamID of the clan owner
-	virtual CSteamID GetClanOwner( CSteamID steamIDClan ) = 0;
+//	virtual CSteamID GetClanOwner( CSteamID steamIDClan ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetClanOwner, CSteamID)
 	// returns the number of officers in a clan (including the owner)
 	virtual int GetClanOfficerCount( CSteamID steamIDClan ) = 0;
 	// returns the steamID of a clan officer, by index, of range [0,GetClanOfficerCount)
-	virtual CSteamID GetClanOfficerByIndex( CSteamID steamIDClan, int iOfficer ) = 0;
+//	virtual CSteamID GetClanOfficerByIndex( CSteamID steamIDClan, int iOfficer ) = 0;
+	STEAM_IFACE_FUNC_2(CSteamID, GetClanOfficerByIndex, CSteamID, int)
 
 	// Rich Presence data is automatically shared between friends who are in the same game
 	// Each user has a set of Key/Value pairs
@@ -366,7 +371,8 @@ public:
 	// this iterates the entire list of users recently played with, across games
 	// GetFriendCoplayTime() returns as a unix time
 	virtual int GetCoplayFriendCount() = 0;
-	virtual CSteamID GetCoplayFriend( int iCoplayFriend ) = 0;
+//	virtual CSteamID GetCoplayFriend( int iCoplayFriend ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetCoplayFriend, int)
 	virtual int GetFriendCoplayTime( CSteamID steamIDFriend ) = 0;
 	virtual AppId_t GetFriendCoplayGame( CSteamID steamIDFriend ) = 0;
 
@@ -378,7 +384,8 @@ public:
 	virtual SteamAPICall_t JoinClanChatRoom( CSteamID steamIDClan ) = 0;
 	virtual bool LeaveClanChatRoom( CSteamID steamIDClan ) = 0;
 	virtual int GetClanChatMemberCount( CSteamID steamIDClan ) = 0;
-	virtual CSteamID GetChatMemberByIndex( CSteamID steamIDClan, int iUser ) = 0;
+//	virtual CSteamID GetChatMemberByIndex( CSteamID steamIDClan, int iUser ) = 0;
+	STEAM_IFACE_FUNC_2(CSteamID, GetChatMemberByIndex, CSteamID, int)
 	virtual bool SendClanChatMessage( CSteamID steamIDClanChat, const char *pchText ) = 0;
 	virtual int GetClanChatMessage( CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, STEAM_OUT_STRUCT() CSteamID *psteamidChatter ) = 0;
 	virtual bool IsClanChatAdmin( CSteamID steamIDClanChat, CSteamID steamIDUser ) = 0;
diff --git a/sdk/public/steam/isteamgameserver.h b/sdk/public/steam/isteamgameserver.h
index 73d3c4e..2bac8f9 100644
--- a/sdk/public/steam/isteamgameserver.h
+++ b/sdk/public/steam/isteamgameserver.h
@@ -68,7 +68,8 @@ public:
 	// status functions
 	virtual bool BLoggedOn() = 0;
 	virtual bool BSecure() = 0; 
-	virtual CSteamID GetSteamID() = 0;
+//	virtual CSteamID GetSteamID() = 0;
+	STEAM_IFACE_FUNC_0(CSteamID, GetSteamID)
 
 	/// Returns true if the master server has requested a restart.
 	/// Only returns true once per request.
@@ -239,7 +240,8 @@ public:
 	// 
 	// Return Value: Returns a SteamID for the user to be tracked with, you should call EndAuthSession()
 	// when this user leaves the server just like you would for a real user.
-	virtual CSteamID CreateUnauthenticatedUserConnection() = 0;
+//	virtual CSteamID CreateUnauthenticatedUserConnection() = 0;
+	STEAM_IFACE_FUNC_0(CSteamID, CreateUnauthenticatedUserConnection)
 
 	// Should be called whenever a user leaves our game server, this lets Steam internally
 	// track which users are currently on which servers for the purposes of preventing a single
diff --git a/sdk/public/steam/isteamhtmlsurface.h b/sdk/public/steam/isteamhtmlsurface.h
index dd33072..1b5f693 100644
--- a/sdk/public/steam/isteamhtmlsurface.h
+++ b/sdk/public/steam/isteamhtmlsurface.h
@@ -21,7 +21,11 @@ const uint32 INVALID_HTMLBROWSER = 0;
 class ISteamHTMLSurface
 {
 public:
+#ifndef __MINGW32__
 	virtual ~ISteamHTMLSurface() {}
+#else
+	virtual void VirtualDestructorFix() = 0;
+#endif//__MINGW32__
 
 	// Must call init and shutdown when starting/ending use of the interface
 	virtual bool Init() = 0;
diff --git a/sdk/public/steam/isteammatchmaking.h b/sdk/public/steam/isteammatchmaking.h
index 6bcba11..341a832 100644
--- a/sdk/public/steam/isteammatchmaking.h
+++ b/sdk/public/steam/isteammatchmaking.h
@@ -126,7 +126,8 @@ public:
 	// should only be called after a LobbyMatchList_t callback is received
 	// iLobby is of the range [0, LobbyMatchList_t::m_nLobbiesMatching)
 	// the returned CSteamID::IsValid() will be false if iLobby is out of range
-	virtual CSteamID GetLobbyByIndex( int iLobby ) = 0;
+//	virtual CSteamID GetLobbyByIndex( int iLobby ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetLobbyByIndex, int)
 
 	// Create a lobby on the Steam servers.
 	// If private, then the lobby will not be returned by any RequestLobbyList() call; the CSteamID
@@ -166,7 +167,8 @@ public:
 	// returns the CSteamID of a user in the lobby
 	// iMember is of range [0,GetNumLobbyMembers())
 	// note that the current user must be in a lobby to retrieve CSteamIDs of other users in that lobby
-	virtual CSteamID GetLobbyMemberByIndex( CSteamID steamIDLobby, int iMember ) = 0;
+//	virtual CSteamID GetLobbyMemberByIndex( CSteamID steamIDLobby, int iMember ) = 0;
+	STEAM_IFACE_FUNC_2(CSteamID, GetLobbyMemberByIndex, CSteamID, int)
 
 	// Get data associated with this lobby
 	// takes a simple key, and returns the string associated with it
@@ -239,7 +241,8 @@ public:
 	// you must be a member of the lobby to access this
 	// there always one lobby owner - if the current owner leaves, another user will become the owner
 	// it is possible (bur rare) to join a lobby just as the owner is leaving, thus entering a lobby with self as the owner
-	virtual CSteamID GetLobbyOwner( CSteamID steamIDLobby ) = 0;
+//	virtual CSteamID GetLobbyOwner( CSteamID steamIDLobby ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetLobbyOwner, CSteamID)
 
 	// changes who the lobby owner is
 	// you must be the lobby owner for this to succeed, and steamIDNewOwner must be in the lobby
diff --git a/sdk/public/steam/isteamremoteplay.h b/sdk/public/steam/isteamremoteplay.h
index 48f0081..8d591c1 100644
--- a/sdk/public/steam/isteamremoteplay.h
+++ b/sdk/public/steam/isteamremoteplay.h
@@ -266,7 +266,8 @@ public:
 	virtual RemotePlaySessionID_t GetSessionID( int iSessionIndex ) = 0;
 
 	// Get the SteamID of the connected user
-	virtual CSteamID GetSessionSteamID( RemotePlaySessionID_t unSessionID ) = 0;
+//	virtual CSteamID GetSessionSteamID( RemotePlaySessionID_t unSessionID ) = 0;
+	STEAM_IFACE_FUNC_1(CSteamID, GetSessionSteamID, RemotePlaySessionID_t)
 
 	// Get the name of the session client device
 	// This returns NULL if the sessionID is not valid
diff --git a/sdk/public/steam/isteamuser.h b/sdk/public/steam/isteamuser.h
index b694206..8214da3 100644
--- a/sdk/public/steam/isteamuser.h
+++ b/sdk/public/steam/isteamuser.h
@@ -30,7 +30,8 @@ public:
 
 	// returns the CSteamID of the account currently logged into the Steam client
 	// a CSteamID is a unique identifier for an account, and used to differentiate users in all parts of the Steamworks API
-	virtual CSteamID GetSteamID() = 0;
+	//virtual CSteamID GetSteamID() = 0;
+	STEAM_IFACE_FUNC_0(CSteamID, GetSteamID)
 
 	// Multiplayer Authentication functions
 	
diff --git a/sdk/public/steam/isteamuserstats.h b/sdk/public/steam/isteamuserstats.h
index d4a83aa..2c6d43a 100644
--- a/sdk/public/steam/isteamuserstats.h
+++ b/sdk/public/steam/isteamuserstats.h
@@ -95,6 +95,7 @@ public:
 	// virtual bool RequestCurrentStats() = 0;
 
 	// Data accessors
+#ifndef __MINGW32__
 	STEAM_FLAT_NAME( GetStatInt32 )
 	virtual bool GetStat( const char *pchName, int32 *pData ) = 0;
 
@@ -107,6 +108,20 @@ public:
 
 	STEAM_FLAT_NAME( SetStatFloat )
 	virtual bool SetStat( const char *pchName, float fData ) = 0;
+#else
+	STEAM_FLAT_NAME( GetStatFloat )
+	virtual bool GetStat( const char *pchName, float *pData ) = 0;
+
+	STEAM_FLAT_NAME( GetStatInt32 )
+	virtual bool GetStat( const char *pchName, int32 *pData ) = 0;
+
+	// Set / update data
+	STEAM_FLAT_NAME( SetStatFloat )
+	virtual bool SetStat( const char *pchName, float fData ) = 0;
+
+	STEAM_FLAT_NAME( SetStatInt32 )
+	virtual bool SetStat( const char *pchName, int32 nData ) = 0;
+#endif//__MINGW32__
 
 	virtual bool UpdateAvgRateStat( const char *pchName, float flCountThisSession, double dSessionLength ) = 0;
 
@@ -162,11 +177,19 @@ public:
 	virtual SteamAPICall_t RequestUserStats( CSteamID steamIDUser ) = 0;
 
 	// requests stat information for a user, usable after a successful call to RequestUserStats()
+#ifndef __MINGW32__
 	STEAM_FLAT_NAME( GetUserStatInt32 )
 	virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData ) = 0;
 
 	STEAM_FLAT_NAME( GetUserStatFloat )
 	virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData ) = 0;
+#else
+	STEAM_FLAT_NAME( GetUserStatFloat )
+	virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData ) = 0;
+
+	STEAM_FLAT_NAME( GetUserStatInt32 )
+	virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData ) = 0;
+#endif//__MINGW32__
 
 	virtual bool GetUserAchievement( CSteamID steamIDUser, const char *pchName, bool *pbAchieved ) = 0;
 	// See notes for GetAchievementAndUnlockTime above
@@ -277,31 +300,55 @@ public:
 	virtual SteamAPICall_t RequestGlobalStats( int nHistoryDays ) = 0;
 
 	// Gets the lifetime totals for an aggregated stat
+#ifndef __MINGW32__
 	STEAM_FLAT_NAME( GetGlobalStatInt64 )
 	virtual bool GetGlobalStat( const char *pchStatName, int64 *pData ) = 0;
 
 	STEAM_FLAT_NAME( GetGlobalStatDouble )
 	virtual bool GetGlobalStat( const char *pchStatName, double *pData ) = 0;
+#else
+	STEAM_FLAT_NAME( GetGlobalStatDouble )
+	virtual bool GetGlobalStat( const char *pchStatName, double *pData ) = 0;
+
+	STEAM_FLAT_NAME( GetGlobalStatInt64 )
+	virtual bool GetGlobalStat( const char *pchStatName, int64 *pData ) = 0;
+#endif//__MINGW32__
 
 	// Gets history for an aggregated stat. pData will be filled with daily values, starting with today.
 	// So when called, pData[0] will be today, pData[1] will be yesterday, and pData[2] will be two days ago, 
 	// etc. cubData is the size in bytes of the pubData buffer. Returns the number of 
 	// elements actually set.
 
+#ifndef __MINGW32__
 	STEAM_FLAT_NAME( GetGlobalStatHistoryInt64 )
 	virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) int64 *pData, uint32 cubData ) = 0;
 
 	STEAM_FLAT_NAME( GetGlobalStatHistoryDouble )
 	virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) double *pData, uint32 cubData ) = 0;
+#else
+	STEAM_FLAT_NAME( GetGlobalStatHistoryDouble )
+	virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) double *pData, uint32 cubData ) = 0;
+
+	STEAM_FLAT_NAME( GetGlobalStatHistoryInt64 )
+	virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) int64 *pData, uint32 cubData ) = 0;
+#endif//__MINGW32__
 
 	// For achievements that have related Progress stats, use this to query what the bounds of that progress are.
 	// You may want this info to selectively call IndicateAchievementProgress when appropriate milestones of progress
 	// have been made, to show a progress notification to the user.
+#ifndef __MINGW32__
 	STEAM_FLAT_NAME( GetAchievementProgressLimitsInt32 )
 	virtual bool GetAchievementProgressLimits( const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress ) = 0;
 
 	STEAM_FLAT_NAME( GetAchievementProgressLimitsFloat )
 	virtual bool GetAchievementProgressLimits( const char *pchName, float *pfMinProgress, float *pfMaxProgress ) = 0;
+#else
+	STEAM_FLAT_NAME( GetAchievementProgressLimitsFloat )
+	virtual bool GetAchievementProgressLimits( const char *pchName, float *pfMinProgress, float *pfMaxProgress ) = 0;
+
+	STEAM_FLAT_NAME( GetAchievementProgressLimitsInt32 )
+	virtual bool GetAchievementProgressLimits( const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress ) = 0;
+#endif//__MINGW32__
 
 };
 
diff --git a/sdk/public/steam/steam_api_common.h b/sdk/public/steam/steam_api_common.h
index f71a39c..829ef1a 100644
--- a/sdk/public/steam/steam_api_common.h
+++ b/sdk/public/steam/steam_api_common.h
@@ -10,6 +10,8 @@
 #ifndef STEAM_API_COMMON_H
 #define STEAM_API_COMMON_H
 
+#include "steam_mingw_hack.h"
+
 #include "steamtypes.h"
 #include "steamclientpublic.h"
 
@@ -140,8 +142,13 @@ class CCallbackBase
 public:
 	CCallbackBase() { m_nCallbackFlags = 0; m_iCallback = 0; }
 	// don't add a virtual destructor because we export this binary interface across dll's
+#ifndef __MINGW32__
 	virtual void Run( void *pvParam ) = 0;
 	virtual void Run( void *pvParam, bool bIOFailure, SteamAPICall_t hSteamAPICall ) = 0;
+#else
+	virtual void Run( void *pvParam, bool bIOFailure, SteamAPICall_t hSteamAPICall ) = 0;
+	virtual void Run( void *pvParam ) = 0;
+#endif//__MINGW32__
 	int GetICallback() { return m_iCallback; }
 	virtual int GetCallbackSizeBytes() = 0;
 
diff --git a/sdk/public/steam/steam_mingw_hack.h b/sdk/public/steam/steam_mingw_hack.h
new file mode 100644
index 0000000..6e18fdc
--- /dev/null
+++ b/sdk/public/steam/steam_mingw_hack.h
@@ -0,0 +1,25 @@
+#ifndef __STEAM_MINGW_HACK_H__
+#define __STEAM_MINGW_HACK_H__
+
+#pragma once
+
+#ifdef __MINGW32__
+#define STEAM_IFACE_FUNC_0(func_ret, func_name)							\
+virtual void func_name(func_ret& r) = 0;								\
+inline func_ret func_name() { func_ret r; func_name(r); return r; }
+#define STEAM_IFACE_FUNC_1(func_ret, func_name, arg_t1)					\
+virtual void func_name(func_ret& r, arg_t1 arg1) = 0;					\
+inline func_ret func_name(arg_t1 arg1) { func_ret r; func_name(r, arg1); return r; }
+#define STEAM_IFACE_FUNC_2(func_ret, func_name, arg_t1, arg_t2)			\
+virtual void func_name(func_ret& r, arg_t1 arg1, arg_t2 arg2) = 0;		\
+inline func_ret func_name(arg_t1 arg1, arg_t2 arg2) { func_ret r; func_name(r, arg1, arg2); return r; }
+#else//__MINGW32__
+#define STEAM_IFACE_FUNC_0(func_ret, func_name)							\
+virtual func_ret func_name() = 0;
+#define STEAM_IFACE_FUNC_1(func_ret, func_name, arg_t1)					\
+virtual func_ret func_name(arg_t1) = 0;
+#define STEAM_IFACE_FUNC_2(func_ret, func_name, arg_t1, arg_t2)			\
+virtual func_ret func_name(arg_t1, arg_t2) = 0;
+#endif//__MINGW32__
+
+#endif//__STEAM_MINGW_HACK_H__
-- 
2.50.0

