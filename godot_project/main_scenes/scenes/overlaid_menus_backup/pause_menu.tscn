[gd_scene load_steps=22 format=3 uid="uid://bne8ncywvoq45"]

[ext_resource type="PackedScene" uid="uid://b5cd6sa8qq4vc" path="res://addons/maaacks_game_template/base/scenes/overlaid_menu/menus/pause_menu.tscn" id="1_eald2"]

[sub_resource type="GDScript" id="GDScript_sbswh"]
script/source = "extends PauseMenu
"

[sub_resource type="GDScript" id="GDScript_3ptis"]
script/source = "@tool
class_name OverlaidMenu
extends Control

@export var pauses_game : bool = false :
	set(value):
		pauses_game = value
		if pauses_game:
			process_mode = PROCESS_MODE_ALWAYS
		else:
			process_mode = PROCESS_MODE_INHERIT

var _initial_pause_state : bool = false
var _initial_focus_mode : FocusMode = FOCUS_ALL
var _initial_mouse_mode : int
var _initial_focus_control
var _scene_tree : SceneTree 

func close():
	_scene_tree.paused = _initial_pause_state
	Input.set_mouse_mode(_initial_mouse_mode)
	if is_instance_valid(_initial_focus_control) and _initial_focus_control.is_inside_tree():
		_initial_focus_control.focus_mode = _initial_focus_mode
		_initial_focus_control.grab_focus()
	queue_free()

func _handle_cancel_input():
	close()

func _unhandled_input(event):
	if event.is_action_pressed(\"ui_cancel\"):
		_handle_cancel_input()
		get_viewport().set_input_as_handled()

func _on_close_button_pressed():
	close()

func _enter_tree():
	_initial_focus_control = get_viewport().gui_get_focus_owner()
	_initial_mouse_mode = Input.get_mouse_mode()
	_scene_tree = get_tree()
	_initial_pause_state = _scene_tree.paused
	if not Engine.is_editor_hint():
		_scene_tree.paused = pauses_game or _initial_pause_state
	if _initial_focus_control:
		_initial_focus_mode = _initial_focus_control.focus_mode
"

[sub_resource type="GDScript" id="GDScript_eald2"]
script/source = "class_name CaptureFocus
extends Container
## Node that captures UI focus for joypad users.
##
## This script assists with capturing UI focus for joypad users when
## opening, closing, or switching between menus.
## When attached to a node, it will check if it was changed to visible
## and a joypad is being used. If both are true, it will capture focus
## on the first eligible node in its scene tree.

## Hierarchical depth to search in the scene tree.
@export var search_depth : int = 1
@export var lock : bool = false :
	set(value):
		var value_changed : bool = lock != value
		lock = value
		if value_changed and not lock:
			update_focus()

func _focus_first_search(control_node : Control, levels : int = 1):
	if control_node == null or !control_node.is_visible_in_tree():
		return false
	if control_node.focus_mode == FOCUS_ALL:
		control_node.grab_focus()
		return true
	if levels < 1:
		return false
	var children = control_node.get_children()
	for child in children:
		if _focus_first_search(child, levels - 1):
			return true

func focus_first():
	_focus_first_search(self, search_depth)

func update_focus():
	if lock : return
	if _is_visible_and_joypad():
		focus_first()

func _is_visible_and_joypad():
	return is_visible_in_tree() and Input.get_connected_joypads().size() > 0

func _on_visibility_changed():
	call_deferred(\"update_focus\")

func _ready():
	if is_inside_tree():
		update_focus()
		connect(\"visibility_changed\", _on_visibility_changed)
"

[sub_resource type="PackedScene" id="PackedScene_d7n8m"]
_bundled = {
"conn_count": 1,
"conns": PackedInt32Array(1073741837, 1073741836, 87, 86, 2, 0, 0),
"editable_instances": [],
"names": PackedStringArray("OverlaidMenu", "Control", "layout_mode", "anchors_preset", "anchor_right", "anchor_bottom", "grow_horizontal", "grow_vertical", "script", "BackgroundColor", "ColorRect", "layout_mode", "anchors_preset", "anchor_right", "anchor_bottom", "grow_horizontal", "grow_vertical", "mouse_filter", "color", "MenuPanelContainer", "PanelContainer", "unique_name_in_owner", "process_mode", "layout_mode", "anchors_preset", "anchor_left", "anchor_top", "anchor_right", "anchor_bottom", "offset_left", "offset_top", "offset_right", "offset_bottom", "grow_horizontal", "grow_vertical", "PanelColor", "ColorRect", "layout_mode", "color", "MarginContainer", "MarginContainer", "layout_mode", "theme_override_constants/margin_left", "theme_override_constants/margin_top", "theme_override_constants/margin_right", "theme_override_constants/margin_bottom", "BoxContainer", "BoxContainer", "layout_mode", "vertical", "TitleMargin", "MarginContainer", "layout_mode", "TitleLabel", "Label", "layout_mode", "theme_override_font_sizes/font_size", "text", "horizontal_alignment", "DescriptionMargin", "MarginContainer", "visible", "layout_mode", "size_flags_vertical", "DescriptionLabel", "RichTextLabel", "layout_mode", "bbcode_enabled", "MenuButtonsMargin", "MarginContainer", "layout_mode", "MenuButtons", "BoxContainer", "unique_name_in_owner", "layout_mode", "size_flags_horizontal", "size_flags_vertical", "theme_override_constants/separation", "alignment", "vertical", "script", "CloseButton", "Button", "custom_minimum_size", "layout_mode", "text", "_on_close_button_pressed", "pressed"),
"node_count": 13,
"node_paths": [NodePath("."), NodePath("."), NodePath("./MenuPanelContainer"), NodePath("./MenuPanelContainer"), NodePath("./MenuPanelContainer/MarginContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/TitleMargin"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/DescriptionMargin"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/MenuButtonsMargin"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/MenuButtonsMargin/MenuButtons"), NodePath("."), NodePath("MenuPanelContainer/MarginContainer/BoxContainer/MenuButtonsMargin/MenuButtons/CloseButton")],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 7, 2, 0, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6, 0, 1073741824, 0, 10, 9, -1, 8, 11, 7, 12, 8, 13, 9, 14, 10, 15, 11, 16, 12, 17, 13, 18, 14, 0, 1073741825, 0, 20, 19, -1, 14, 21, 15, 22, 16, 23, 17, 24, 18, 25, 19, 26, 20, 27, 21, 28, 22, 29, 23, 30, 24, 31, 25, 32, 26, 33, 27, 34, 28, 0, 1073741826, 0, 36, 35, -1, 2, 37, 29, 38, 30, 0, 1073741827, 0, 40, 39, -1, 5, 41, 31, 42, 32, 43, 33, 44, 34, 45, 35, 0, 1073741828, 0, 47, 46, -1, 2, 48, 36, 49, 37, 0, 1073741829, 0, 51, 50, -1, 1, 52, 38, 0, 1073741830, 0, 54, 53, -1, 4, 55, 39, 56, 40, 57, 41, 58, 42, 0, 1073741831, 0, 60, 59, -1, 3, 61, 43, 62, 44, 63, 45, 0, 1073741832, 0, 65, 64, -1, 2, 66, 46, 67, 47, 0, 1073741833, 0, 69, 68, -1, 1, 70, 48, 0, 1073741834, 0, 72, 71, -1, 8, 73, 49, 74, 50, 75, 51, 76, 52, 77, 53, 78, 54, 79, 55, 80, 56, 0, 1073741835, 0, 82, 81, -1, 3, 83, 57, 84, 58, 85, 59, 0),
"variants": [3, 15, 1.0, 1.0, 2, 2, SubResource("GDScript_3ptis"), 1, 15, 1.0, 1.0, 2, 2, 2, Color(0, 0, 0, 0.12549), true, 3, 1, 8, 0.5, 0.5, 0.5, 0.5, -16.0, -16.0, 16.0, 16.0, 2, 2, 2, Color(0, 0, 0, 1), 2, 16, 16, 16, 16, 2, true, 2, 2, 24, "Menu", 1, false, 2, 3, 2, true, 2, true, 2, 4, 3, 16, 1, true, SubResource("GDScript_eald2"), Vector2(128, 40), 2, "Close"],
"version": 3
}

[sub_resource type="GDScript" id="GDScript_2vpqx"]
script/source = "@tool
class_name OverlaidMenuContainer
extends OverlaidMenu

@export var menu_scene : PackedScene :
	set(value):
		var _value_changed = menu_scene != value
		menu_scene = value
		if _value_changed:
			for child in %MenuContainer.get_children():
				child.queue_free()
			if menu_scene:
				var _instance = menu_scene.instantiate()
				%MenuContainer.add_child(_instance)
"

[sub_resource type="PackedScene" id="PackedScene_fvi7d"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("OverlaidMenuContainer", "script", "menu_scene", "MenuContainer", "MarginContainer", "unique_name_in_owner", "layout_mode", "size_flags_vertical", "MenuButtonsMargin", "theme_override_constants/margin_top", "theme_override_constants/margin_bottom", "CloseButton", "size_flags_horizontal", "text"),
"node_count": 4,
"node_paths": [NodePath("./MenuPanelContainer/MarginContainer/BoxContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer"), NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/MenuButtonsMargin/MenuButtons")],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 2, 1, 1, 2, 2, 0, 1073741824, 0, 4, 786435, -1, 3, 5, 3, 6, 4, 7, 5, 0, 1073741825, -1, 2147483647, 1048584, -1, 2, 9, 6, 10, 7, 0, 1073741826, -1, 2147483647, 262155, -1, 2, 12, 8, 13, 9, 0),
"variants": [SubResource("PackedScene_d7n8m"), SubResource("GDScript_2vpqx"), null, true, 2, 3, 16, 16, 4, "Back"],
"version": 3
}

[sub_resource type="GDScript" id="GDScript_6qjnl"]
script/source = "class_name MiniOptionsMenu
extends Control

@onready var mute_control = %MuteControl
@onready var fullscreen_control = %FullscreenControl

@export var audio_control_scene : PackedScene
@export var hide_busses : Array[String]

func _on_bus_changed(bus_value : float, bus_iter : int):
	AppSettings.set_bus_volume(bus_iter, bus_value)

func _add_audio_control(bus_name : String, bus_value : float, bus_iter : int):
	if audio_control_scene == null or bus_name in hide_busses or bus_name.begins_with(AppSettings.SYSTEM_BUS_NAME_PREFIX):
		return
	var audio_control = audio_control_scene.instantiate()
	%AudioControlContainer.call_deferred(\"add_child\", audio_control)
	if audio_control is OptionControl:
		audio_control.option_section = OptionControl.OptionSections.AUDIO
		audio_control.option_name = bus_name
		audio_control.value = bus_value
		audio_control.connect(\"setting_changed\", _on_bus_changed.bind(bus_iter))

func _add_audio_bus_controls():
	for bus_iter in AudioServer.bus_count:
		var bus_name : String = AppSettings.get_audio_bus_name(bus_iter)
		var linear : float = AppSettings.get_bus_volume(bus_iter)
		_add_audio_control(bus_name, linear, bus_iter)

func _update_ui():
	_add_audio_bus_controls()
	mute_control.value = AppSettings.is_muted()
	fullscreen_control.value = AppSettings.is_fullscreen(get_window())

func _sync_with_config() -> void:
	_update_ui()

func _ready():
	_sync_with_config()

func _on_mute_control_setting_changed(value):
	AppSettings.set_mute(value)

func _on_fullscreen_control_setting_changed(value):
	AppSettings.set_fullscreen_enabled(value, get_window())
"

[sub_resource type="GDScript" id="GDScript_nns8o"]
script/source = "@tool
class_name OptionControl
extends Control

signal setting_changed(value)

enum OptionSections{
	NONE,
	INPUT,
	AUDIO,
	VIDEO,
	GAME,
	APPLICATION,
	CUSTOM,
}

const OptionSectionNames : Dictionary = {
	OptionSections.NONE : \"\",
	OptionSections.INPUT : AppSettings.INPUT_SECTION,
	OptionSections.AUDIO : AppSettings.AUDIO_SECTION,
	OptionSections.VIDEO : AppSettings.VIDEO_SECTION,
	OptionSections.GAME : AppSettings.GAME_SECTION,
	OptionSections.APPLICATION : AppSettings.APPLICATION_SECTION,
	OptionSections.CUSTOM : AppSettings.CUSTOM_SECTION,
}

## Locks config names in case of issues with inherited scenes.
## Intentionally put first for initialization.
@export var lock_config_names : bool = false
## Defines text displayed to the user.
@export var option_name : String :
	set(value):
		var _update_config : bool = option_name.to_pascal_case() == key and not lock_config_names
		option_name = value
		if is_inside_tree():
			%OptionLabel.text = \"%s%s\" % [option_name, label_suffix]
		if _update_config:
			key = option_name.to_pascal_case()
## Defines what section in the config file this option belongs under.
@export var option_section : OptionSections :
	set(value):
		var _update_config : bool = OptionSectionNames[option_section] == section and not lock_config_names
		option_section = value
		if _update_config:
			section = OptionSectionNames[option_section]

@export_group(\"Config Names\")
## Defines the key for this option variable in the config file.
@export var key : String
## Defines the section for this option variable in the config file.
@export var section : String
@export_group(\"Format\")
@export var label_suffix : String = \" :\"
@export_group(\"Properties\")
## Defines whether the option is editable, or only visible by the user.
@export var editable : bool = true : set = set_editable
## Defines what kind of variable this option stores in the config file.
@export var property_type : Variant.Type = TYPE_BOOL

## It is advised to use an external editor to set the default value in the scene file.
## Godot can experience a bug (caching issue?) that may undo changes.
var default_value
var _connected_nodes : Array

func _on_setting_changed(value):
	Config.set_config(section, key, value)
	setting_changed.emit(value)

func _get_setting(default : Variant = null) -> Variant:
	return Config.get_config(section, key, default)

func _connect_option_inputs(node):
	if node in _connected_nodes: return
	if node is Button:
		if node is OptionButton:
			node.item_selected.connect(_on_setting_changed)
		elif node is ColorPickerButton:
			node.color_changed.connect(_on_setting_changed)
		else:
			node.toggled.connect(_on_setting_changed)
		_connected_nodes.append(node)
	if node is Range:
		node.value_changed.connect(_on_setting_changed)
		_connected_nodes.append(node)
	if node is LineEdit or node is TextEdit:
		node.text_changed.connect(_on_setting_changed)
		_connected_nodes.append(node)

func set_value(value : Variant):
	if value == null:
		return
	for node in get_children():
		if node is Button:
			if node is OptionButton:
				node.select(value as int)
			elif node is ColorPickerButton:
				node.color = value as Color
			else:
				node.button_pressed = value as bool
		if node is Range:
			node.value = value as float
		if node is LineEdit or node is TextEdit:
			node.text = \"%s\" % value

func set_editable(value : bool = true):
	editable = value
	for node in get_children():
		if node is Button:
			node.disabled = !editable
		if node is Slider or node is SpinBox or node is LineEdit or node is TextEdit:
			node.editable = editable

func _ready():
	lock_config_names = lock_config_names
	option_section = option_section
	option_name = option_name
	property_type = property_type
	default_value = default_value
	set_value(_get_setting(default_value))
	for child in get_children():
		_connect_option_inputs(child)
	child_entered_tree.connect(_connect_option_inputs)

func _set(property : StringName, value : Variant) -> bool:
	if property == \"value\":
		set_value(value)
		return true
	return false

func _get_property_list():
	return [
		{ \"name\": \"value\", \"type\": property_type, \"usage\": PROPERTY_USAGE_NONE},
		{ \"name\": \"default_value\", \"type\": property_type}
	]
"

[sub_resource type="PackedScene" id="PackedScene_qodnp"]
_bundled = {
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("OptionControl", "HBoxContainer", "custom_minimum_size", "offset_right", "offset_bottom", "script", "default_value", "OptionLabel", "Label", "unique_name_in_owner", "layout_mode", "size_flags_horizontal", "text", "vertical_alignment"),
"node_count": 2,
"node_paths": [NodePath(".")],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 5, 2, 0, 3, 1, 4, 2, 5, 3, 6, 4, 0, 1073741824, 0, 8, 7, -1, 5, 9, 5, 10, 6, 11, 7, 12, 8, 13, 9, 0),
"variants": [Vector2(0, 40), 400.0, 40.0, SubResource("GDScript_nns8o"), false, true, 2, 3, " :", 1],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_o3mni"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("OptionControl", "custom_minimum_size", "offset_bottom", "property_type", "default_value", "HSlider", "HSlider", "custom_minimum_size", "layout_mode", "size_flags_vertical", "max_value", "step", "value", "tick_count", "ticks_on_borders"),
"node_count": 2,
"node_paths": [NodePath(".")],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 4, 1, 1, 2, 2, 3, 3, 4, 4, 0, 1073741824, 0, 6, 524293, -1, 8, 7, 5, 8, 6, 9, 7, 10, 8, 11, 9, 12, 10, 13, 11, 14, 12, 0),
"variants": [SubResource("PackedScene_qodnp"), Vector2(0, 28), 28.0, 3, 1.0, Vector2(256, 0), 2, 4, 1.0, 0.05, 1.0, 11, true],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_2r0t1"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("OptionControl", "CheckButton", "CheckButton", "layout_mode"),
"node_count": 2,
"node_paths": [NodePath(".")],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 0, 0, 1073741824, 0, 2, 524289, -1, 1, 3, 1, 0),
"variants": [SubResource("PackedScene_qodnp"), 2],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_uodko"]
_bundled = {
"conn_count": 2,
"conns": PackedInt32Array(1073741828, 1073741827, 41, 40, 2, 0, 0, 1073741830, 1073741829, 43, 42, 2, 0, 0),
"editable_instances": [],
"names": PackedStringArray("MiniOptionsMenu", "VBoxContainer", "custom_minimum_size", "anchors_preset", "anchor_left", "anchor_top", "anchor_right", "anchor_bottom", "offset_left", "offset_top", "offset_right", "offset_bottom", "grow_horizontal", "grow_vertical", "size_flags_horizontal", "theme_override_constants/separation", "alignment", "script", "audio_control_scene", "AudioControlContainer", "VBoxContainer", "unique_name_in_owner", "layout_mode", "theme_override_constants/separation", "script", "search_depth", "MuteControl", "unique_name_in_owner", "layout_mode", "option_name", "option_section", "key", "section", "FullscreenControl", "unique_name_in_owner", "layout_mode", "option_name", "option_section", "key", "section", "_on_mute_control_setting_changed", "setting_changed", "_on_fullscreen_control_setting_changed", "setting_changed"),
"node_count": 4,
"node_paths": [NodePath("."), NodePath("."), NodePath("."), NodePath("."), NodePath("MuteControl"), NodePath("."), NodePath("FullscreenControl")],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 17, 2, 0, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6, 9, 7, 10, 8, 11, 9, 12, 10, 13, 11, 14, 12, 15, 13, 16, 14, 17, 15, 18, 16, 0, 1073741824, 0, 20, 19, -1, 5, 21, 17, 22, 18, 23, 19, 24, 20, 25, 21, 0, 1073741825, 0, 2147483647, 26, 22, 6, 27, 23, 28, 24, 29, 25, 30, 26, 31, 27, 32, 28, 0, 1073741826, 0, 2147483647, 33, 29, 6, 34, 30, 35, 31, 36, 32, 37, 33, 38, 34, 39, 35, 0),
"variants": [Vector2(400, 260), 8, 0.5, 0.5, 0.5, 0.5, -200.0, -130.0, 200.0, 130.0, 2, 2, 4, 8, 1, SubResource("GDScript_6qjnl"), SubResource("PackedScene_o3mni"), true, 2, 8, SubResource("GDScript_eald2"), 2, SubResource("PackedScene_2r0t1"), true, 2, "Mute", 2, "Mute", "AudioSettings", SubResource("PackedScene_2r0t1"), true, 2, "Fullscreen", 3, "FullscreenEnabled", "VideoSettings"],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_23tfb"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("OverlaidMenuContainer", "menu_scene", "TitleLabel", "text"),
"node_count": 2,
"node_paths": [NodePath("./MenuPanelContainer/MarginContainer/BoxContainer/TitleMargin")],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 1, 1, 1, 0, 1073741824, -1, 2147483647, 262146, -1, 1, 3, 2, 0),
"variants": [SubResource("PackedScene_fvi7d"), SubResource("PackedScene_uodko"), "Options"],
"version": 3
}

[sub_resource type="GDScript" id="GDScript_k3fdx"]
script/source = "extends MiniOptionsMenu
"

[sub_resource type="PackedScene" id="PackedScene_usxsv"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("MiniOptionsMenu", "script"),
"node_count": 1,
"node_paths": [],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 1, 1, 1, 0),
"variants": [SubResource("PackedScene_uodko"), SubResource("GDScript_k3fdx")],
"version": 3
}

[sub_resource type="GDScript" id="GDScript_s5i6e"]
script/source = "extends MiniOptionsMenu

func _on_reset_game_control_reset_confirmed():
	GameLevelLog.reset_game_data()
"

[sub_resource type="GDScript" id="GDScript_50ifx"]
script/source = "extends HBoxContainer

signal reset_confirmed


func _on_ResetButton_pressed():
	$ConfirmResetDialog.popup_centered()
	$ResetButton.disabled = true

func _on_ConfirmResetDialog_confirmed():
	emit_signal(\"reset_confirmed\")

func _on_confirm_reset_dialog_canceled():
	$ResetButton.disabled = false
"

[sub_resource type="PackedScene" id="PackedScene_0cquw"]
_bundled = {
"conn_count": 3,
"conns": PackedInt32Array(1073741828, 1073741827, 21, 20, 2, 0, 0, 1073741830, 1073741829, 23, 22, 2, 0, 0, 1073741832, 1073741831, 25, 24, 2, 0, 0),
"editable_instances": [],
"names": PackedStringArray("ResetGameControl", "HBoxContainer", "custom_minimum_size", "offset_top", "offset_right", "offset_bottom", "script", "ResetLabel", "Label", "layout_mode", "size_flags_horizontal", "text", "ResetButton", "Button", "custom_minimum_size", "layout_mode", "text", "ConfirmResetDialog", "ConfirmationDialog", "dialog_text", "_on_ResetButton_pressed", "pressed", "_on_confirm_reset_dialog_canceled", "canceled", "_on_ConfirmResetDialog_confirmed", "confirmed"),
"node_count": 4,
"node_paths": [NodePath("."), NodePath("."), NodePath("."), NodePath("."), NodePath("ResetButton"), NodePath("."), NodePath("ConfirmResetDialog"), NodePath("."), NodePath("ConfirmResetDialog")],
"nodes": PackedInt32Array(-1, -1, 1, 0, -1, 5, 2, 0, 3, 1, 4, 2, 5, 3, 6, 4, 0, 1073741824, 0, 8, 7, -1, 3, 9, 5, 10, 6, 11, 7, 0, 1073741825, 0, 13, 12, -1, 3, 14, 8, 15, 9, 16, 10, 0, 1073741826, 0, 18, 17, -1, 1, 19, 11, 0),
"variants": [Vector2(0, 32), 210.0, 305.0, 242.0, SubResource("GDScript_50ifx"), 2, 3, "Reset Game :", Vector2(72, 32), 2, "Reset", "Do you want to reset your game data?"],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_jirxe"]
_bundled = {
"base_scene": 0,
"conn_count": 1,
"conns": PackedInt32Array(1073741826, 1073741825, 5, 4, 2, 0, 0),
"editable_instances": [],
"names": PackedStringArray("MiniOptionsMenu", "script", "ResetGameControl", "layout_mode", "_on_reset_game_control_reset_confirmed", "reset_confirmed"),
"node_count": 2,
"node_paths": [NodePath("."), NodePath("."), NodePath("ResetGameControl")],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 1, 1, 1, 0, 1073741824, 0, 2147483647, 1048578, 2, 1, 3, 3, 0),
"variants": [SubResource("PackedScene_usxsv"), SubResource("GDScript_s5i6e"), SubResource("PackedScene_0cquw"), 2],
"version": 3
}

[sub_resource type="PackedScene" id="PackedScene_784io"]
_bundled = {
"base_scene": 0,
"conn_count": 0,
"conns": PackedInt32Array(),
"editable_instances": [],
"names": PackedStringArray("MiniOptionsOverlaidMenu", "menu_scene"),
"node_count": 1,
"node_paths": [],
"nodes": PackedInt32Array(-1, -1, 2147483647, 0, -1, 1, 1, 1, 0),
"variants": [SubResource("PackedScene_23tfb"), SubResource("PackedScene_jirxe")],
"version": 3
}

[node name="PauseMenu" instance=ExtResource("1_eald2")]
script = SubResource("GDScript_sbswh")
options_packed_scene = SubResource("PackedScene_784io")
